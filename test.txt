// SoundController.cpp : 定义应用程序的入口点。
//
#include "framework.h"
#include "SoundController.h"
#define MAX_LOADSTRING 100


HINSTANCE hInst;                                // 当前实例
WCHAR szTitle[MAX_LOADSTRING];                  // 标题栏文本
WCHAR szWindowClass[MAX_LOADSTRING];            // 主窗口类名
// 全局变量:
IMFMediaSession   *m_pSession;
IMFMediaSession* m_pSession1;
IMFSourceResolver* m_pSourceResolver;
IUnknown* pSource = NULL;
IMFMediaSource* m_pSource;
IMFTopology* m_pTopology = NULL;
IMFPresentationDescriptor* m_pSourcePD = NULL;
DWORD cSourceStream = 0;
IMFTopologyNode* pSourceNode = NULL;//源节点
IMFTopologyNode* pOutPutNode = NULL;//输出节点
IMFActivate* pSinkActivate = NULL;
IMFStreamDescriptor* pSD = NULL;
IMFMediaTypeHandler* pHandler = NULL;
IMFActivate* pActivate = NULL;
PROPVARIANT var;
//转码

WCHAR* wszSourceFile = NULL;

const WCHAR* wszTargetFile = L"out1.wav";
const WCHAR* wszTargetFile2 = L"out2.wav";
BYTE* Bits = NULL;
const LONG MAX_AUDIO_DURATION_MSEC = 246000; // 90 seconds
IMFSourceReader* pReader = NULL;
IMFSourceReader* pReaderAnother = NULL;
HANDLE hFile = INVALID_HANDLE_VALUE;
HANDLE hFile2 = INVALID_HANDLE_VALUE;


// 此代码模块中包含的函数的前向声明:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);
void CreateMediaSession(HWND hWnd);
void CreateMediaSession1(HWND hWnd);
//转码模块
template<class T>void SafeRelease(T** ppT) {
    if (*ppT) {
        (*ppT)->Release();
        *ppT = NULL;
    }
}
HRESULT WriteWaveFile(IMFSourceReader*, HANDLE, LONG);
HRESULT ConfigureAudioStream(IMFSourceReader*, IMFMediaType**);
HRESULT WriteWaveHeader(HANDLE, IMFMediaType*, DWORD*);
DWORD CalculateMaxAudioDataSize(IMFMediaType*, DWORD, DWORD);
HRESULT WriteWaveData(HANDLE, IMFSourceReader*, DWORD, DWORD*);
HRESULT FixUpChunkSizes(HANDLE, DWORD, DWORD);
HRESULT WriteToFile(HANDLE, void*, DWORD);
void OnFileOpen(HWND);
void TransCode();

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: 在此处放置代码。
    // 初始化全局字符串
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_SOUNDCONTROLLER, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // 执行应用程序初始化:
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_SOUNDCONTROLLER));

    MSG msg;

    // 主消息循环:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}


//  函数: MyRegisterClass()
//
//  目标: 注册窗口类。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_SOUNDCONTROLLER));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_SOUNDCONTROLLER);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目标: 保存实例句柄并创建主窗口
//
//   注释:
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // 将实例句柄存储在全局变量中

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);
   CreateMediaSession(hWnd);
   CreateMediaSession1(hWnd);
   return TRUE;
}

//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目标: 处理主窗口的消息。
//
//  WM_COMMAND  - 处理应用程序菜单
//  WM_PAINT    - 绘制主窗口
//  WM_DESTROY  - 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // 分析菜单选择:
            switch (wmId)
            {
            case IDM_ABOUT:
                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
                break;
            case IDM_EXIT:
                DestroyWindow(hWnd);
                break;
            case ID_STOP_SOUND:
                m_pSession1->Start(NULL, &var);
                break;
            case ID_DISPLAY_SOUND:
                m_pSession->Start(NULL, &var);
                break;
            case ID_INPUT_FILE:
                OnFileOpen(hWnd);
                break;
            case ID_FLAC_TO_WAV:
                TransCode();
                break;
            default:
                return DefWindowProc(hWnd, message, wParam, lParam);
            }
        }
        break;
    case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);
            // TODO: 在此处添加使用 hdc 的任何绘图代码...
            EndPaint(hWnd, &ps);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}

//创建媒体会话的专用函数
void CreateMediaSession(HWND hWnd)
{
    HRESULT hr;
    //初始化mediaFoundation
    hr = MFStartup(MF_VERSION);
    //创建媒体会话
    hr = MFCreateMediaSession(NULL, &m_pSession);
    //创建源解析器
    hr = MFCreateSourceResolver(&m_pSourceResolver);
    MF_OBJECT_TYPE OBjectType = MF_OBJECT_INVALID;
    hr = m_pSourceResolver->CreateObjectFromURL(
        L"wmpaud8.wav",
        MF_RESOLUTION_MEDIASOURCE,
        NULL,
        &OBjectType,
        &pSource
    );
    hr = pSource->QueryInterface(IID_PPV_ARGS(&m_pSource));
    hr = m_pSource->CreatePresentationDescriptor(&m_pSourcePD);
    //Create a new topology
    hr = MFCreateTopology(&m_pTopology);
    hr = m_pSourcePD->GetStreamDescriptorCount(&cSourceStream);
    for (DWORD i = 0; i < cSourceStream; i++) {
        BOOL fSelected = FALSE;
        hr = m_pSourcePD->GetStreamDescriptorByIndex(i, &fSelected, &pSD);
        hr = pSD->GetMediaTypeHandler(&pHandler);
        GUID guidMajorType;
        hr = pHandler->GetMajorType(&guidMajorType);
        if (MFMediaType_Audio == guidMajorType) {
            hr = MFCreateAudioRendererActivate(&pActivate);
        }
        else if (MFMediaType_Video == guidMajorType) {
            hr = MFCreateVideoRendererActivate(hWnd, &pActivate);
        }
        hr = MFCreateTopologyNode(MF_TOPOLOGY_SOURCESTREAM_NODE, &pSourceNode);
        hr = pSourceNode->SetUnknown(MF_TOPONODE_SOURCE, m_pSource);
        hr = pSourceNode->SetUnknown(MF_TOPONODE_PRESENTATION_DESCRIPTOR, m_pSourcePD);
        hr = pSourceNode->SetUnknown(MF_TOPONODE_STREAM_DESCRIPTOR, pSD);
        hr = m_pTopology->AddNode(pSourceNode);
        //创建拓扑节点
        hr = MFCreateTopologyNode(MF_TOPOLOGY_OUTPUT_NODE, &pOutPutNode);
        hr = pOutPutNode->SetObject(pActivate);
        hr = pOutPutNode->SetUINT32(MF_TOPONODE_STREAMID, 0);
        hr = pOutPutNode->SetUINT32(MF_TOPONODE_NOSHUTDOWN_ON_REMOVE, FALSE);
        hr = m_pTopology->AddNode(pOutPutNode);
        hr = pSourceNode->ConnectOutput(0, pOutPutNode, 0);

    }
    m_pSession->SetTopology(0, m_pTopology);
}
//创建媒体会话的专用函数2
void CreateMediaSession1(HWND hWnd)
{
    HRESULT hr;
    //初始化mediaFoundation
    hr = MFStartup(MF_VERSION);
    //创建媒体会话
    hr = MFCreateMediaSession(NULL, &m_pSession1);
    //创建源解析器
    hr = MFCreateSourceResolver(&m_pSourceResolver);
    MF_OBJECT_TYPE OBjectType = MF_OBJECT_INVALID;
    hr = m_pSourceResolver->CreateObjectFromURL(
        L"RADWIMPS.flac",
        MF_RESOLUTION_MEDIASOURCE,
        NULL,
        &OBjectType,
        &pSource
    );
    hr = pSource->QueryInterface(IID_PPV_ARGS(&m_pSource));
    hr = m_pSource->CreatePresentationDescriptor(&m_pSourcePD);
    //Create a new topology
    hr = MFCreateTopology(&m_pTopology);
    hr = m_pSourcePD->GetStreamDescriptorCount(&cSourceStream);
    for (DWORD i = 0; i < cSourceStream; i++) {
        BOOL fSelected = FALSE;
        hr = m_pSourcePD->GetStreamDescriptorByIndex(i, &fSelected, &pSD);
        hr = pSD->GetMediaTypeHandler(&pHandler);
        GUID guidMajorType;
        hr = pHandler->GetMajorType(&guidMajorType);
        if (MFMediaType_Audio == guidMajorType) {
            hr = MFCreateAudioRendererActivate(&pActivate);
        }
        else if (MFMediaType_Video == guidMajorType) {
            hr = MFCreateVideoRendererActivate(hWnd, &pActivate);
        }
        hr = MFCreateTopologyNode(MF_TOPOLOGY_SOURCESTREAM_NODE, &pSourceNode);
        hr = pSourceNode->SetUnknown(MF_TOPONODE_SOURCE, m_pSource);
        hr = pSourceNode->SetUnknown(MF_TOPONODE_PRESENTATION_DESCRIPTOR, m_pSourcePD);
        hr = pSourceNode->SetUnknown(MF_TOPONODE_STREAM_DESCRIPTOR, pSD);
        hr = m_pTopology->AddNode(pSourceNode);
        //创建拓扑节点
        hr = MFCreateTopologyNode(MF_TOPOLOGY_OUTPUT_NODE, &pOutPutNode);
        hr = pOutPutNode->SetObject(pActivate);
        hr = pOutPutNode->SetUINT32(MF_TOPONODE_STREAMID, 0);
        hr = pOutPutNode->SetUINT32(MF_TOPONODE_NOSHUTDOWN_ON_REMOVE, FALSE);
        hr = m_pTopology->AddNode(pOutPutNode);
        hr = pSourceNode->ConnectOutput(0, pOutPutNode, 0);

    }
    m_pSession1->SetTopology(0, m_pTopology);
}
//高层模块
HRESULT WriteWaveFile(
    IMFSourceReader* pReader,//指向源阅读器
    HANDLE hFile,//处理输出文件
    LONG msecAudioData //音频文件的最大值
) {
    HRESULT hr = S_OK;
    DWORD cbHeader = 0;//文件头的大小
    DWORD cbAudioData = 0;
    DWORD cbMaxAudioData = 0;
    IMFMediaType* pAudioType = NULL;

    hr = ConfigureAudioStream(pReader, &pAudioType);
    if (SUCCEEDED(hr)) {
        hr = WriteWaveHeader(hFile, pAudioType, &cbAudioData);
    }
    if (SUCCEEDED(hr)) {
        //计算准备写入到输出文件的音频片段的最大数据量
        cbMaxAudioData = CalculateMaxAudioDataSize(pAudioType, cbHeader, msecAudioData);
        hr = WriteWaveData(hFile, pReader, cbMaxAudioData, &cbAudioData);
    }
    if (SUCCEEDED(hr)) {
        hr = FixUpChunkSizes(hFile, cbHeader, cbAudioData);
    }

    SafeRelease(&pAudioType);
    return hr;
}

DWORD CalculateMaxAudioDataSize(
    IMFMediaType* pAudioType,
    DWORD cbHeader,
    DWORD msecAudioData) {
    UINT32 cbBlockSize = 0;
    UINT32 cbBytesPerSecond = 0;

    cbBlockSize = MFGetAttributeUINT32(pAudioType, MF_MT_AUDIO_BLOCK_ALIGNMENT, 0);
    cbBytesPerSecond = MFGetAttributeUINT32(pAudioType, MF_MT_AUDIO_AVG_BYTES_PER_SECOND, 0);
    DWORD cbAudioClipSize = (DWORD)MulDiv(cbBytesPerSecond, msecAudioData, 1000);
    DWORD cbMaxSize = MAXDWORD - cbHeader;
    cbAudioClipSize = min(cbAudioClipSize, cbMaxSize);
    cbAudioClipSize = (cbAudioClipSize / cbBlockSize) * cbBlockSize;
    return cbAudioClipSize;
}
HRESULT ConfigureAudioStream(
    IMFSourceReader* pReader,
    IMFMediaType** ppPCMAudio
) {
    HRESULT hr = S_OK;
    IMFMediaType* pUncompressedAudioType = NULL;
    IMFMediaType* pPartialType = NULL;
    hr = MFCreateMediaType(&pPartialType);
    if (SUCCEEDED(hr)) {
        hr = pPartialType->SetGUID(MF_MT_MAJOR_TYPE, MFMediaType_Audio);
    }
    if (SUCCEEDED(hr)) {
        hr = pPartialType->SetGUID(MF_MT_SUBTYPE, MFAudioFormat_PCM);//子类型
    }
    if (SUCCEEDED(hr)) {
        hr = pReader->SetCurrentMediaType(
            (DWORD)MF_SOURCE_READER_FIRST_AUDIO_STREAM,
            NULL,
            pPartialType
        );
    }
    // Get the complete uncompressed format.
    if (SUCCEEDED(hr))
    {
        hr = pReader->GetCurrentMediaType(
            (DWORD)MF_SOURCE_READER_FIRST_AUDIO_STREAM,
            &pUncompressedAudioType
        );
    }

    // Ensure the stream is selected.
    if (SUCCEEDED(hr))
    {
        hr = pReader->SetStreamSelection(
            (DWORD)MF_SOURCE_READER_FIRST_AUDIO_STREAM,
            TRUE
        );
    }

    // Return the PCM format to the caller.
    if (SUCCEEDED(hr))
    {
        *ppPCMAudio = pUncompressedAudioType;
        (*ppPCMAudio)->AddRef();
    }

    SafeRelease(&pUncompressedAudioType);
    SafeRelease(&pPartialType);
    return hr;
}
//输出文件头部信息的写入顺序
HRESULT WriteWaveHeader(
    HANDLE hFile,
    IMFMediaType* pMediaType,
    DWORD* pcbWritten
) {
    HRESULT hr = S_OK;
    UINT32 cbFormat = 0;
    WAVEFORMATEX* pWav = NULL;
    *pcbWritten = 0;

    hr = MFCreateWaveFormatExFromMFMediaType(
        pMediaType,
        &pWav,
        &cbFormat
    );
    if (SUCCEEDED(hr)) {
        DWORD header[] = {
            FCC('RIFF'),
            0,
            FCC('WAVE'),//fmt chunk 的开始
            FCC('fmt'),
            cbFormat
        };
        DWORD dataHeader[] = { FCC('data'),0 };
        hr = WriteToFile(hFile, header, sizeof(header));
        if (SUCCEEDED(hr)) {
            hr = WriteToFile(hFile, pWav, cbFormat);
        }
        if (SUCCEEDED(hr)) {
            hr = WriteToFile(hFile, dataHeader, sizeof(dataHeader));
        }
        if (SUCCEEDED(hr)) {
            *pcbWritten = sizeof(header) + cbFormat + sizeof(dataHeader);
        }
    }
    CoTaskMemFree(pWav);
    return hr;
}
//写入音频数据
HRESULT WriteWaveData(
    HANDLE hFile,
    //HANDLE hFile2,
    IMFSourceReader* pReader,
    //IMFSourceReader* pReaderAnother,
    DWORD cbMaxAudioData,
    //DWORD cbMaxAudioDataAnother,
    DWORD* pcbDataWritten){
    //DWORD* pcbDataWrittenAnother) {

    HRESULT hr = S_OK;
    DWORD cbAudioData = 0;
    DWORD cbBuffer = 0;
    BYTE* pAudioData = NULL;
    DWORD cbBufferAnother = 0;
    IMFSample* pSample = NULL;
    IMFMediaBuffer* pBuffer = NULL;
    while (true) {
        DWORD dwFlags = 0;
        hr = pReader->ReadSample(
            (DWORD)MF_SOURCE_READER_FIRST_AUDIO_STREAM,
            0,
            NULL,
            &dwFlags,
            NULL,
            &pSample
        );
        if (FAILED(hr)) { break; }
        if (dwFlags & MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED) {
            break;
        }
        if (dwFlags & MF_SOURCE_READERF_ENDOFSTREAM) {
            break;
        }
        if (pSample == NULL) {
            continue;
        }
        hr = pSample->ConvertToContiguousBuffer(&pBuffer);
        if (FAILED(hr)) { break; }
        //锁定内存，得到缓冲地址指针
        hr = pBuffer->Lock(&pAudioData, NULL, &cbBuffer);
        if (FAILED(hr)) { break; }
        if (cbMaxAudioData - cbAudioData < cbBuffer) {
            cbBuffer = cbMaxAudioData - cbAudioData;
        }
        hr = WriteToFile(hFile, pAudioData, cbBuffer);
        hr = pBuffer->Unlock();
        pAudioData = NULL;
        if (FAILED(hr)) { break; }
        cbAudioData += cbBuffer;
        if (cbAudioData >= cbMaxAudioData) {
            break;
        }
    }
    SafeRelease(&pSample);
    SafeRelease(&pBuffer);
    if (SUCCEEDED(hr)) {
        MessageBox(NULL, L"success to write file1", L"message", NULL);
        *pcbDataWritten = cbAudioData;
    }
    if (pAudioData) {
        pBuffer->Unlock();
    }
    SafeRelease(&pBuffer);
    SafeRelease(&pSample);
    return hr;
}
//
HRESULT FixUpChunkSizes(
    HANDLE hFile,
    DWORD cbHeader,
    DWORD cbAudioData) {
    HRESULT hr = S_OK;
    LARGE_INTEGER ll;
    ll.QuadPart = cbHeader - sizeof(DWORD);
    if (0 == SetFilePointerEx(hFile, ll, NULL, FILE_BEGIN))
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
    }
    if (SUCCEEDED(hr)) {
        hr = WriteToFile(hFile, &cbAudioData, sizeof(cbAudioData));
    }
    if (SUCCEEDED(hr)) {
        ll.QuadPart = sizeof(DWORD);
        if (0 == SetFilePointerEx(hFile, ll, NULL, FILE_BEGIN))
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
        }
    }
    if (SUCCEEDED(hr))
    {
        ll.QuadPart = sizeof(DWORD);
        if (0 == SetFilePointerEx(hFile, ll, NULL, FILE_BEGIN))
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
        }
    }
    if (SUCCEEDED(hr)) {
        DWORD cbRiffFileSize = cbHeader + cbAudioData - 8;
        hr = WriteToFile(hFile, &cbRiffFileSize, sizeof(cbRiffFileSize));
    }
    return hr;
}
//

HRESULT WriteToFile(HANDLE hFile, void* p, DWORD cb) {
    DWORD cbWritten = 0;
    HRESULT hr = S_OK;
    BOOL bResult = WriteFile(hFile, p, cb, &cbWritten, NULL);
    if (!bResult) {
        hr = HRESULT_FROM_WIN32(GetLastError());
    }
    return hr;

}
void OnFileOpen(HWND hwnd)
{
    HRESULT hr = S_OK;

    IFileOpenDialog* pFileOpen = NULL;
    IShellItem* pItem = NULL;

    // Create the FileOpenDialog object.
    hr = CoCreateInstance(
        __uuidof(FileOpenDialog),
        NULL,
        CLSCTX_INPROC_SERVER,
        IID_PPV_ARGS(&pFileOpen)
    );
    if (FAILED(hr)) { goto done; }


    hr = pFileOpen->SetTitle(L"please select a source media file");
    if (FAILED(hr)) { goto done; }


    // Show the file-open dialog.
    hr = pFileOpen->Show(hwnd);

    if (hr == HRESULT_FROM_WIN32(ERROR_CANCELLED))
    {
        // User cancelled.
        hr = S_OK;
        goto done;
    }
    if (FAILED(hr)) { goto done; }

    // Get the file name from the dialog.
    hr = pFileOpen->GetResult(&pItem);
    if (FAILED(hr)) { goto done; }

    hr = pItem->GetDisplayName(SIGDN_URL, &wszSourceFile);
    if (FAILED(hr)) { goto done; }

done:
    if (FAILED(hr))
    {
        MessageBox(hwnd, L"you can not open any file", L"message", NULL);
    }

    if (pItem)
    {
        pItem->Release();
    }
    if (pFileOpen)
    {
        pFileOpen->Release();
    }
}



void TransCode()
{
    HRESULT hr = S_OK;
    //////////////////////////////////////////////////
    // Create the source reader to read the input file.
    if (SUCCEEDED(hr))
    {
        hr = MFCreateSourceReaderFromURL(
            //L"http://netclass.csu.edu.cn/jpkc2012/csu/multimedia/jalx/mmx.wmv",
            wszSourceFile,
            NULL,
            &pReader
        );

        if (FAILED(hr))
        {
            return;
        }
    }
    // open the output wave file so as to write decoded data
    if (SUCCEEDED(hr))
    {
        hFile = CreateFile(
            wszTargetFile,
            GENERIC_WRITE,
            FILE_SHARE_READ,
            NULL,
            CREATE_ALWAYS,
            0,
            NULL
        );

        if (hFile == INVALID_HANDLE_VALUE)
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
            return;
        }
    }
    // write wave file
    if (SUCCEEDED(hr))
    {
        hr = WriteWaveFile(pReader, hFile, MAX_AUDIO_DURATION_MSEC);
    }

    if (FAILED(hr))
    {
        return;
    }
    // close file
    if (hFile != INVALID_HANDLE_VALUE)
    {
        CloseHandle(hFile);
    }

    SafeRelease(&pReader);
    ///////////////////////////////////
}
